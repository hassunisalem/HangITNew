{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport * as React from 'react';\nimport { XR } from '@aws-amplify/xr';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { IconButton } from './IconButton';\nimport { Loading } from './Loading';\nimport * as AmplifyUI from '@aws-amplify/ui';\nimport { sumerianScene } from '../Amplify-UI/data-test-attributes';\nvar SCENE_CONTAINER_DOM_ID = 'scene-container-dom-id';\nvar SCENE_DOM_ID = 'scene-dom-id';\nvar logger = new Logger('SumerianScene');\n\nvar SumerianScene =\n/** @class */\nfunction (_super) {\n  __extends(SumerianScene, _super);\n\n  function SumerianScene(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      showEnableAudio: false,\n      muted: false,\n      loading: true,\n      percentage: 0,\n      isFullscreen: false,\n      sceneError: null,\n      isVRPresentationActive: false\n    };\n    return _this;\n  }\n\n  SumerianScene.prototype.setStateAsync = function (state) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.setState(state, resolve);\n    });\n  };\n\n  SumerianScene.prototype.componentDidMount = function () {\n    document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n    document.addEventListener('webkitfullscreenchange', this.onFullscreenChange.bind(this));\n    document.addEventListener('mozfullscreenchange', this.onFullscreenChange.bind(this));\n    document.addEventListener('MSFullscreenChange', this.onFullscreenChange.bind(this));\n    this.loadAndSetupScene(this.props.sceneName, SCENE_DOM_ID);\n  };\n\n  SumerianScene.prototype.componentWillUnmount = function () {\n    document.removeEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n    document.removeEventListener('webkitfullscreenchange', this.onFullscreenChange.bind(this));\n    document.removeEventListener('mozfullscreenchange', this.onFullscreenChange.bind(this));\n    document.removeEventListener('MSFullscreenChange', this.onFullscreenChange.bind(this));\n  };\n\n  SumerianScene.prototype.loadAndSetupScene = function (sceneName, sceneDomId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var sceneOptions, e_1, sceneError;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.setStateAsync({\n              loading: true\n            });\n            sceneOptions = {\n              progressCallback: function progressCallback(progress) {\n                var percentage = progress * 100;\n\n                _this.setState({\n                  percentage: percentage\n                });\n              }\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , XR.loadScene(sceneName, sceneDomId, sceneOptions)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            sceneError = {\n              displayText: 'Failed to load scene',\n              error: e_1\n            };\n            logger.error(sceneError.displayText, sceneError.error);\n            this.setStateAsync({\n              sceneError: sceneError\n            });\n            return [2\n            /*return*/\n            ];\n\n          case 4:\n            XR.start(sceneName);\n            this.setStateAsync({\n              muted: XR.isMuted(sceneName),\n              isVRPresentationActive: XR.isVRPresentationActive(sceneName),\n              loading: false\n            });\n            XR.onSceneEvent(sceneName, 'AudioEnabled', function () {\n              return _this.setStateAsync({\n                showEnableAudio: false\n              });\n            });\n            XR.onSceneEvent(sceneName, 'AudioDisabled', function () {\n              return _this.setStateAsync({\n                showEnableAudio: true\n              });\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SumerianScene.prototype.setMuted = function (muted) {\n    if (this.state.showEnableAudio) {\n      XR.enableAudio(this.props.sceneName);\n      this.setState({\n        showEnableAudio: false\n      });\n    }\n\n    XR.setMuted(this.props.sceneName, muted);\n    this.setState({\n      muted: muted\n    });\n  };\n\n  SumerianScene.prototype.onFullscreenChange = function () {\n    var doc = document;\n    this.setState({\n      isFullscreen: doc.fullscreenElement !== null\n    });\n  };\n\n  SumerianScene.prototype.maximize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var sceneDomElement;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            sceneDomElement = document.getElementById(SCENE_CONTAINER_DOM_ID);\n            return [4\n            /*yield*/\n            , sceneDomElement.requestFullscreen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SumerianScene.prototype.minimize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var doc;\n      return __generator(this, function (_a) {\n        doc = document;\n\n        if (doc.exitFullscreen) {\n          doc.exitFullscreen();\n        } else if (doc.mozCancelFullScreen) {\n          doc.mozCancelFullScreen();\n        } else if (doc.webkitExitFullscreen) {\n          doc.webkitExitFullscreen();\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  SumerianScene.prototype.toggleVRPresentation = function () {\n    try {\n      if (this.state.isVRPresentationActive) {\n        XR.exitVR(this.props.sceneName);\n      } else {\n        XR.enterVR(this.props.sceneName);\n      }\n    } catch (e) {\n      logger.error('Unable to start/stop WebVR System: ' + e.message);\n      return;\n    }\n\n    this.setState({\n      isVRPresentationActive: !this.state.isVRPresentationActive\n    });\n  };\n\n  SumerianScene.prototype.render = function () {\n    var _this = this;\n\n    var muteButton;\n    var enterOrExitVRButton;\n    var screenSizeButton;\n\n    if (XR.isSceneLoaded(this.props.sceneName)) {\n      if (this.state.showEnableAudio) {\n        muteButton = React.createElement(IconButton, {\n          variant: \"sound-mute\",\n          tooltip: \"The scene is muted. Click to unmute.\",\n          onClick: function onClick() {\n            return _this.setMuted(false);\n          },\n          autoShowTooltip: true\n        });\n      } else if (XR.isMuted(this.props.sceneName)) {\n        muteButton = React.createElement(IconButton, {\n          variant: \"sound-mute\",\n          tooltip: \"Unmute\",\n          onClick: function onClick() {\n            return _this.setMuted(false);\n          }\n        });\n      } else {\n        muteButton = React.createElement(IconButton, {\n          variant: \"sound\",\n          tooltip: \"Mute\",\n          onClick: function onClick() {\n            return _this.setMuted(true);\n          }\n        });\n      }\n\n      if (XR.isVRCapable(this.props.sceneName)) {\n        if (this.state.isVRPresentationActive) {\n          logger.info('VR Presentation Active');\n          enterOrExitVRButton = React.createElement(IconButton, {\n            variant: \"exit-vr\",\n            tooltip: \"Exit VR\",\n            onClick: function onClick() {\n              return _this.toggleVRPresentation();\n            }\n          });\n        } else {\n          logger.info('VR Presentation Inactive');\n          enterOrExitVRButton = React.createElement(IconButton, {\n            variant: \"enter-vr\",\n            tooltip: \"Enter VR\",\n            onClick: function onClick() {\n              return _this.toggleVRPresentation();\n            }\n          });\n        }\n      }\n\n      if (this.state.isFullscreen) {\n        screenSizeButton = React.createElement(IconButton, {\n          variant: \"minimize\",\n          tooltip: \"Exit Fullscreen\",\n          onClick: function onClick() {\n            return _this.minimize();\n          }\n        });\n      } else {\n        screenSizeButton = React.createElement(IconButton, {\n          variant: \"maximize\",\n          tooltip: \"Fullscreen\",\n          onClick: function onClick() {\n            return _this.maximize();\n          }\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      id: SCENE_CONTAINER_DOM_ID,\n      className: AmplifyUI.sumerianSceneContainer,\n      \"data-test\": sumerianScene.container\n    }, React.createElement(\"div\", {\n      id: SCENE_DOM_ID,\n      className: AmplifyUI.sumerianScene,\n      \"data-test\": sumerianScene.sumerianScene\n    }, this.state.loading && React.createElement(Loading, {\n      sceneName: this.props.sceneName,\n      percentage: this.state.percentage,\n      sceneError: this.state.sceneError\n    })), React.createElement(\"div\", {\n      className: AmplifyUI.sceneBar,\n      \"data-test\": sumerianScene.bar\n    }, React.createElement(\"span\", {\n      className: AmplifyUI.sceneActions,\n      \"data-test\": sumerianScene.actions\n    }, muteButton, enterOrExitVRButton, screenSizeButton)));\n  };\n\n  return SumerianScene;\n}(React.Component);\n\nexport { SumerianScene };\n/**\n * @deprecated use named import\n */\n\nexport default SumerianScene;","map":null,"metadata":{},"sourceType":"module"}